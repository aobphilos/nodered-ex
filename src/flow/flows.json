[
  {
    "id": "d540fbb2.7b0058",
    "type": "tab",
    "label": "Tunnel - ngrok",
    "disabled": true,
    "info": ""
  },
  {
    "id": "c380c3c7.15595",
    "type": "tab",
    "label": "Tunnel - LocalTunnel",
    "disabled": false,
    "info": ""
  },
  {
    "id": "4349246e.5ce76c",
    "type": "tab",
    "label": "AQI - Eko",
    "disabled": false,
    "info": ""
  },
  {
    "id": "3dae2bbd.3f58c4",
    "type": "tab",
    "label": "AQI - AirVisual",
    "disabled": false,
    "info": ""
  },
  {
    "id": "af6b45a3.697ec8",
    "type": "tab",
    "label": "Corona Virus",
    "disabled": false,
    "info": ""
  },
  {
    "id": "9e92ac19.1083e",
    "type": "tab",
    "label": "MQTT Broker",
    "disabled": false,
    "info": ""
  },
  {
    "id": "7d20c29a.35472c",
    "type": "tab",
    "label": "Batify Bot",
    "disabled": false,
    "info": ""
  },
  {
    "id": "82d75fe6.a2011",
    "type": "mqtt-broker",
    "z": "",
    "name": "MQTT Local",
    "broker": "broker",
    "port": "1883",
    "clientid": "",
    "usetls": false,
    "compatmode": true,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "d9352e75.352d3",
    "type": "ui_base",
    "theme": {
      "name": "theme-dark",
      "lightTheme": {
        "default": "#0094CE",
        "baseColor": "#0094CE",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
        "edited": true,
        "reset": false
      },
      "darkTheme": {
        "default": "#097479",
        "baseColor": "#097479",
        "baseFont": "Times New Roman,Times,serif",
        "edited": true,
        "reset": false
      },
      "customTheme": {
        "name": "Untitled Theme 1",
        "default": "#4B7930",
        "baseColor": "#4B7930",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
      },
      "themeState": {
        "base-color": {
          "default": "#097479",
          "value": "#097479",
          "edited": false
        },
        "page-titlebar-backgroundColor": {
          "value": "#097479",
          "edited": false
        },
        "page-backgroundColor": { "value": "#111111", "edited": false },
        "page-sidebar-backgroundColor": { "value": "#000000", "edited": false },
        "group-textColor": { "value": "#0eb8c0", "edited": false },
        "group-borderColor": { "value": "#555555", "edited": false },
        "group-backgroundColor": { "value": "#333333", "edited": false },
        "widget-textColor": { "value": "#eeeeee", "edited": false },
        "widget-backgroundColor": { "value": "#097479", "edited": false },
        "widget-borderColor": { "value": "#333333", "edited": false },
        "base-font": { "value": "Times New Roman,Times,serif" }
      },
      "angularTheme": {
        "primary": "indigo",
        "accents": "blue",
        "warn": "red",
        "background": "grey"
      }
    },
    "site": {
      "name": "Node-RED Dashboard",
      "hideToolbar": "false",
      "allowSwipe": "false",
      "lockMenu": "false",
      "allowTempTheme": "true",
      "dateFormat": "DD/MM/YYYY",
      "sizes": {
        "sx": 48,
        "sy": 48,
        "gx": 6,
        "gy": 6,
        "cx": 6,
        "cy": 6,
        "px": 0,
        "py": 0
      }
    }
  },
  {
    "id": "4b102dde.c015e4",
    "type": "ui_tab",
    "z": "",
    "name": "Dashboard",
    "icon": "dashboard",
    "order": 1,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "68cc47f6.694e68",
    "type": "ui_group",
    "z": "",
    "name": "Outdoor",
    "tab": "4b102dde.c015e4",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": true
  },
  {
    "id": "61db5a84.ac6754",
    "type": "ui_group",
    "z": "",
    "name": "Weather",
    "tab": "4b102dde.c015e4",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": true
  },
  {
    "id": "163ce63f.41c2ca",
    "type": "ui_link",
    "z": "",
    "name": "Corona Virus",
    "link": "https://www.worldometers.info/coronavirus/",
    "icon": "fa-heartbeat",
    "target": "iframe",
    "order": 3
  },
  {
    "id": "73781609.cbaa68",
    "type": "ui_link",
    "z": "",
    "name": "AirVisual",
    "link": "https://www.airvisual.com/thailand/bangkok",
    "icon": "toys",
    "target": "iframe",
    "order": 2
  },
  {
    "id": "37628ca5.1539c4",
    "type": "ui_group",
    "z": "",
    "name": "Corona Virus",
    "tab": "4b102dde.c015e4",
    "order": 4,
    "disp": true,
    "width": "6",
    "collapse": true
  },
  { "id": "d2141d2c.4b36e", "type": "ngrokauth", "z": "" },
  {
    "id": "96f74ae7.6c5c78",
    "type": "mqtt-broker",
    "z": "",
    "name": "Soldier Cloud",
    "broker": "soldier.cloudmqtt.com",
    "port": "14037",
    "clientid": "",
    "usetls": false,
    "compatmode": true,
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "willTopic": "",
    "willQos": "0",
    "willPayload": ""
  },
  {
    "id": "f6997764.fd6c78",
    "type": "ui_group",
    "z": "",
    "name": "Indoor",
    "tab": "4b102dde.c015e4",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": true
  },
  {
    "id": "75d6ea2b.fbf854",
    "type": "ui_group",
    "z": "",
    "name": "Tools",
    "tab": "4b102dde.c015e4",
    "order": 5,
    "disp": true,
    "width": "6",
    "collapse": true
  },
  { "id": "545319ae.e53798", "type": "ngrokauth", "z": "" },
  {
    "id": "fc99d5b4.3de228",
    "type": "catch",
    "z": "c380c3c7.15595",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 660,
    "wires": [["2a6c902b.c0c74"]]
  },
  {
    "id": "2a6c902b.c0c74",
    "type": "debug",
    "z": "c380c3c7.15595",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 330,
    "y": 660,
    "wires": []
  },
  {
    "id": "8eede0b0.a2aed",
    "type": "comment",
    "z": "c380c3c7.15595",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 170,
    "y": 600,
    "wires": []
  },
  {
    "id": "37ccf727.63deb8",
    "type": "status",
    "z": "c380c3c7.15595",
    "name": "",
    "scope": null,
    "x": 640,
    "y": 660,
    "wires": [["f1e48c91.99aaa"]]
  },
  {
    "id": "f1e48c91.99aaa",
    "type": "debug",
    "z": "c380c3c7.15595",
    "name": "Console - Status",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 890,
    "y": 660,
    "wires": []
  },
  {
    "id": "8ea53c91.8ba2d",
    "type": "comment",
    "z": "c380c3c7.15595",
    "name": "Handle All Node Status",
    "info": "",
    "x": 680,
    "y": 600,
    "wires": []
  },
  {
    "id": "c242ab7a.440748",
    "type": "debug",
    "z": "c380c3c7.15595",
    "name": "Console - StdOut",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 790,
    "y": 200,
    "wires": []
  },
  {
    "id": "5e210e26.2f5e",
    "type": "exec",
    "z": "c380c3c7.15595",
    "command": "",
    "addpay": true,
    "append": "",
    "useSpawn": "true",
    "timer": "",
    "oldrc": false,
    "name": "",
    "x": 550,
    "y": 240,
    "wires": [
      ["c242ab7a.440748", "d585dd19.cd33"],
      ["8bdac1b6.b51e"],
      ["4aa021af.c8494"]
    ]
  },
  {
    "id": "46094fb5.8f404",
    "type": "inject",
    "z": "c380c3c7.15595",
    "name": "Tunnel On",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "x": 130,
    "y": 100,
    "wires": [["352c600b.fcfb2"]]
  },
  {
    "id": "16f3da1e.a03b36",
    "type": "inject",
    "z": "c380c3c7.15595",
    "name": "Tunnel Off",
    "topic": "",
    "payload": "tunnel-kill-pid",
    "payloadType": "flow",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 120,
    "y": 240,
    "wires": [["5e210e26.2f5e"]]
  },
  {
    "id": "8bdac1b6.b51e",
    "type": "debug",
    "z": "c380c3c7.15595",
    "name": "Console - StdErr",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 790,
    "y": 240,
    "wires": []
  },
  {
    "id": "4aa021af.c8494",
    "type": "debug",
    "z": "c380c3c7.15595",
    "name": "Console - Tunnel",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 790,
    "y": 280,
    "wires": []
  },
  {
    "id": "3d2221f9.74206e",
    "type": "mqtt out",
    "z": "c380c3c7.15595",
    "name": "Pub: info/proxy/url",
    "topic": "info/proxy/url",
    "qos": "",
    "retain": "",
    "broker": "82d75fe6.a2011",
    "x": 1090,
    "y": 140,
    "wires": []
  },
  {
    "id": "64768c28.84f8e4",
    "type": "comment",
    "z": "c380c3c7.15595",
    "name": "Publish new URL",
    "info": "Publish new URL to the client via MQTT",
    "x": 1080,
    "y": 100,
    "wires": []
  },
  {
    "id": "d585dd19.cd33",
    "type": "function",
    "z": "c380c3c7.15595",
    "name": "Filter Message",
    "func": "function filterMessage({ payload }) {\n    const url = payload.replace(/(your url is\\: )/i, '').trim();\n    return {\n        payload: url\n    };\n}\nreturn filterMessage(msg);",
    "outputs": 1,
    "noerr": 0,
    "x": 780,
    "y": 140,
    "wires": [["3d2221f9.74206e"]]
  },
  {
    "id": "29292532.8b305a",
    "type": "status",
    "z": "c380c3c7.15595",
    "name": "Spawn Status",
    "scope": ["5e210e26.2f5e"],
    "x": 570,
    "y": 400,
    "wires": [["4d148f64.22fd9"]]
  },
  {
    "id": "4d148f64.22fd9",
    "type": "function",
    "z": "c380c3c7.15595",
    "name": "Save PID (flow.)",
    "func": "function savePID({ status }) {\n    if(status && status.text) {\n        const pid = status.text.split(':')[1];\n        const msgKill = `kill ${pid}`;\n        flow.set('tunnel-kill-pid', msgKill);\n    }\n        \n}\nreturn savePID(msg);",
    "outputs": 1,
    "noerr": 0,
    "x": 820,
    "y": 400,
    "wires": [[]]
  },
  {
    "id": "be3e3bb4.490998",
    "type": "comment",
    "z": "c380c3c7.15595",
    "name": "Monitor for the tunnel output message",
    "info": "",
    "x": 650,
    "y": 360,
    "wires": []
  },
  {
    "id": "e2ef0108.fdb7b",
    "type": "comment",
    "z": "c380c3c7.15595",
    "name": "!!! Bootstrapper Tunnel !!!",
    "info": "",
    "x": 170,
    "y": 40,
    "wires": []
  },
  {
    "id": "d25a6aa8.92a258",
    "type": "function",
    "z": "c380c3c7.15595",
    "name": "Init Tunnel",
    "func": "function initTunnel() {\n  let command = 'npx localtunnel ';\n  const host = env.get('LOCALTUNNEL_HOST');\n  const port = env.get('LOCALTUNNEL_PORT');\n  const sub = env.get('LOCALTUNNEL_SUB_DOMAIN');\n  command += host ? ` -h ${host} ` : '';\n  command += port ? ` -p ${port} ` : '';\n  command += sub ? ` -s ${sub} ` : '';\n\n  return {\n    payload: command\n  };\n}\nreturn initTunnel();\n",
    "outputs": 1,
    "noerr": 0,
    "x": 330,
    "y": 160,
    "wires": [["5e210e26.2f5e"]]
  },
  {
    "id": "352c600b.fcfb2",
    "type": "switch",
    "z": "c380c3c7.15595",
    "name": "Check Enable",
    "property": "LOCALTUNNEL_ENABLE",
    "propertyType": "env",
    "rules": [{ "t": "regex", "v": "true", "vt": "str", "case": true }],
    "checkall": "false",
    "repair": false,
    "outputs": 1,
    "x": 340,
    "y": 100,
    "wires": [["d25a6aa8.92a258"]]
  },
  {
    "id": "3b157635.e6154a",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "Sample: Retrieve AQI (AirVisual)",
    "info": "",
    "x": 170,
    "y": 40,
    "wires": []
  },
  {
    "id": "d705ab70.b0e0d8",
    "type": "http request",
    "z": "3dae2bbd.3f58c4",
    "name": "AirVisual API",
    "method": "GET",
    "ret": "obj",
    "paytoqs": true,
    "url": "https://api.airvisual.com/v2/nearest_city",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 710,
    "y": 100,
    "wires": [["9f01e50a.8e13a8"]]
  },
  {
    "id": "f1bfa63b.6c5ad8",
    "type": "inject",
    "z": "3dae2bbd.3f58c4",
    "name": "Inject Every - 1 hour",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "x": 140,
    "y": 100,
    "wires": [["175aab57.028f05"]],
    "outputLabels": ["inject"],
    "icon": "font-awesome/fa-feed"
  },
  {
    "id": "5fe5e47.828271c",
    "type": "function",
    "z": "3dae2bbd.3f58c4",
    "name": "Transform Data",
    "func": "function transformData() {\n  const { status, data } = flow.get('airData') || {};\n\n  if (status !== 'success')\n    return {\n      payload: { status: 'failed', message: 'Cannot get any data from API' }\n    };\n\n  return [\n    {\n      payload: {\n        status,\n        data\n      }\n    },\n    {\n      weather: data.current.weather\n    },\n    {\n      city: data.city,\n      state: data.state,\n      country: data.country,\n      pollution: data.current.pollution\n    }\n  ];\n}\n\nreturn transformData();\n",
    "outputs": 3,
    "noerr": 0,
    "x": 360,
    "y": 320,
    "wires": [
      ["df100de3.6a93f", "ae52ca62.2ee8f8"],
      ["22226c07.b54024"],
      ["d8e9b57f.dc9b28"]
    ]
  },
  {
    "id": "24b793a2.c76c5c",
    "type": "ui_template",
    "z": "3dae2bbd.3f58c4",
    "group": "61db5a84.ac6754",
    "name": "Weather Box",
    "order": 1,
    "width": 6,
    "height": 4,
    "format": "<div style=\"text-align: center;\" >\n  <div  style=\"height: 80px; display:inline-block; padding-right: 10px;\">\n    <img src=\"{{msg.payload.url}}\" alt=\"{{msg.payload.desc}}\" title=\"{{msg.payload.desc}}\" width=\"75\" /><br/>\n  </div>\n  <div  style=\"display:inline-block;margin-top: 19px;vertical-align: top;font-size: 35px;\">\n    <span>{{msg.payload.temp}}°</span>\n  </div>\n  <div style=\"width: 100%; text-transform: capitalize;\">\n    <h3>{{msg.payload.desc}}</h3>\n  </div>\n</div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "templateScope": "local",
    "x": 890,
    "y": 360,
    "wires": [[]]
  },
  {
    "id": "22226c07.b54024",
    "type": "function",
    "z": "3dae2bbd.3f58c4",
    "name": "Mapping Weather Icon",
    "func": "const { ic, tp: temp }  = msg.weather;\nlet desc = 'Weather Icon';\nlet icon = ic; \nswitch (ic){\n    case '01d': desc='clear sky (day)'; break;\n    case '01n': desc='clear sky (night)'; break;\n    case '02d': desc='few clouds (day)'; break;\n    case '02n': desc='few clouds (night)'; break;\n    case '03n': \n    case '03d': icon = '03d'; desc='scattered clouds'; break;\n    case '04n': \n    case '04d': icon = '04d'; desc='broken clouds'; break;\n    case '09n': \n    case '09d': icon = '09d'; desc='shower rain'; break;\n    case '10d': desc='rain (day time)'; break;\n    case '10n': desc='rain (night time)'; break;\n    case '11n': \n    case '11d': icon = '11d'; desc='thunderstorm'; break;\n    case '13n': \n    case '13d': icon = '13d'; desc='snow'; break;\n    case '50n': \n    case '50d': icon = '50d'; desc='mist'; break;\n}\nreturn {\n    payload: {\n        url: `https://www.airvisual.com/images/${icon}.png`,\n        desc: desc,\n        temp\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "x": 620,
    "y": 360,
    "wires": [["24b793a2.c76c5c"]]
  },
  {
    "id": "45112887.c49798",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "Display Icon by Weather",
    "info": "",
    "x": 930,
    "y": 320,
    "wires": []
  },
  {
    "id": "d8e9b57f.dc9b28",
    "type": "function",
    "z": "3dae2bbd.3f58c4",
    "name": "Mapping US AQI",
    "func": "const { city, state, country, pollution } = msg;\nreturn {\n    topic: `${city} / ${state}`,\n    payload: { aqi: pollution.aqius }\n};",
    "outputs": 1,
    "noerr": 0,
    "x": 610,
    "y": 460,
    "wires": [["4e73f33.3af0c0c"]]
  },
  {
    "id": "4e73f33.3af0c0c",
    "type": "ui_gauge",
    "z": "3dae2bbd.3f58c4",
    "name": "AQI Box",
    "group": "68cc47f6.694e68",
    "order": 1,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "{{topic}}",
    "label": "µg/m³",
    "format": "{{payload.aqi}}",
    "min": 0,
    "max": "300",
    "colors": ["#40e400", "#ffff00", "#f91000"],
    "seg1": "Moderate",
    "seg2": "Unhealthy",
    "x": 880,
    "y": 460,
    "wires": []
  },
  {
    "id": "49d97f2c.655d4",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "Display US AQI",
    "info": "",
    "x": 900,
    "y": 420,
    "wires": []
  },
  {
    "id": "df0e5b24.816d08",
    "type": "debug",
    "z": "3dae2bbd.3f58c4",
    "name": "Console - Raw",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 1090,
    "y": 100,
    "wires": []
  },
  {
    "id": "ebb3a795.ca2a48",
    "type": "function",
    "z": "3dae2bbd.3f58c4",
    "name": "Extract Env.",
    "func": "return {\n    headers: {\n        'x-forwarded-for': msg.payload.publicIPv4\n    },\n    payload: {\n        city: env.get('AIRVISUAL_CITY'),\n        state: env.get('AIRVISUAL_STATE'),\n        country:env.get('AIRVISUAL_COUNTRY'),\n        key: env.get('AIRVISUAL_KEY')\n    }\n};",
    "outputs": 1,
    "noerr": 0,
    "x": 530,
    "y": 100,
    "wires": [["d705ab70.b0e0d8"]]
  },
  {
    "id": "c5076f1d.ac4c5",
    "type": "complete",
    "z": "3dae2bbd.3f58c4",
    "name": "Trigger AirData",
    "scope": ["9f01e50a.8e13a8"],
    "uncaught": false,
    "x": 120,
    "y": 320,
    "wires": [["5fe5e47.828271c"]]
  },
  {
    "id": "df100de3.6a93f",
    "type": "debug",
    "z": "3dae2bbd.3f58c4",
    "name": "Console - airData",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 600,
    "y": 200,
    "wires": []
  },
  {
    "id": "9f01e50a.8e13a8",
    "type": "function",
    "z": "3dae2bbd.3f58c4",
    "name": "Save Data",
    "func": "function saveData({payload}) {\n    flow.set('airData', payload);\n    return flow.get('airData');\n}\n\nreturn saveData(msg);",
    "outputs": 1,
    "noerr": 0,
    "x": 890,
    "y": 100,
    "wires": [["df0e5b24.816d08"]]
  },
  {
    "id": "dfe49d40.0ac75",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "When air data has been saved it trigger immediately.",
    "info": "",
    "x": 230,
    "y": 240,
    "wires": []
  },
  {
    "id": "21e088c2.e9c0d8",
    "type": "inject",
    "z": "af6b45a3.697ec8",
    "name": "Inject Every - 1 hour",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "x": 140,
    "y": 120,
    "wires": [["59e10350.70f26c"]]
  },
  {
    "id": "59e10350.70f26c",
    "type": "http request",
    "z": "af6b45a3.697ec8",
    "name": "Request Data",
    "method": "GET",
    "ret": "txt",
    "paytoqs": false,
    "url": "https://www.worldometers.info/coronavirus/",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 360,
    "y": 120,
    "wires": [["1fc2205d.7f25b"]]
  },
  {
    "id": "686c4821.739328",
    "type": "debug",
    "z": "af6b45a3.697ec8",
    "name": "Console - Raw",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 940,
    "y": 120,
    "wires": []
  },
  {
    "id": "1fc2205d.7f25b",
    "type": "html",
    "z": "af6b45a3.697ec8",
    "name": "Scraping Data",
    "property": "payload",
    "outproperty": "payload",
    "tag": "[id*='maincounter-wrap']",
    "ret": "text",
    "as": "single",
    "x": 560,
    "y": 120,
    "wires": [["ba921ce4.34c24"]]
  },
  {
    "id": "1de370d5.7c637f",
    "type": "comment",
    "z": "af6b45a3.697ec8",
    "name": "Scraping data from Worldometers",
    "info": "[Corona Virus](https://www.worldometers.info/coronavirus/)",
    "x": 180,
    "y": 57,
    "wires": []
  },
  {
    "id": "718948e7.dea9a8",
    "type": "function",
    "z": "af6b45a3.697ec8",
    "name": "Transform Data",
    "func": "function transformData() {\n  let virus = {};\n  const { payload: content } = flow.get(\"virusData\");\n\n  if (Array.isArray(content)) {\n    content.forEach(item => {\n      if (item) {\n        const [key, value] = item.split(\": \");\n        virus[`${key.trim()}`] = value.trim();\n      }\n    });\n  }\n  return virus;\n}\nreturn {\n  payload: transformData()\n};\n",
    "outputs": 1,
    "noerr": 0,
    "x": 360,
    "y": 300,
    "wires": [["1ed2cdc9.022ee2", "7a8c3b6c.97d354", "1af9d2a3.20b4fd"]]
  },
  {
    "id": "baec9bad.523ec8",
    "type": "complete",
    "z": "af6b45a3.697ec8",
    "name": "Trigger virusData",
    "scope": ["ba921ce4.34c24"],
    "uncaught": false,
    "x": 120,
    "y": 300,
    "wires": [["718948e7.dea9a8"]]
  },
  {
    "id": "ba921ce4.34c24",
    "type": "function",
    "z": "af6b45a3.697ec8",
    "name": "Save Data",
    "func": "function saveData({ payload }) {\n    flow.set('virusData', { payload });\n    return flow.get('virusData');\n}\n\nreturn saveData(msg);",
    "outputs": 1,
    "noerr": 0,
    "x": 750,
    "y": 120,
    "wires": [["686c4821.739328"]]
  },
  {
    "id": "40502c81.1d0784",
    "type": "comment",
    "z": "af6b45a3.697ec8",
    "name": "When virus data has been saved it trigger immediately.",
    "info": "",
    "x": 240,
    "y": 240,
    "wires": []
  },
  {
    "id": "1ed2cdc9.022ee2",
    "type": "debug",
    "z": "af6b45a3.697ec8",
    "name": "Console - virusData",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 640,
    "y": 240,
    "wires": []
  },
  {
    "id": "d257bf19.d88a6",
    "type": "ui_template",
    "z": "af6b45a3.697ec8",
    "group": "37628ca5.1539c4",
    "name": "Corona Box",
    "order": 1,
    "width": 6,
    "height": 4,
    "format": "<style>\n    .gray {\n        color: white;\n    }\n    .red {\n        color: red;\n    }\n    .green {\n        color: #01da01;\n    }\n    .main {\n        text-align: center;\n        font-size: large;\n    }\n    .main div {\n        padding-bottom: 10px;\n    }\n</style>\n<div class=\"main\" ng-bind-html=\"msg.payload\"></div>",
    "storeOutMessages": true,
    "fwdInMessages": true,
    "templateScope": "local",
    "x": 830,
    "y": 360,
    "wires": [[]]
  },
  {
    "id": "7a8c3b6c.97d354",
    "type": "function",
    "z": "af6b45a3.697ec8",
    "name": "Build HTML",
    "func": "function buildTemplate({ payload }) {\n  return Object.entries(payload)\n    .map(([key, value], i) => {\n      let css = \"gray\";\n\n      if (i === 1) css = \"red\";\n      else if (i === 2) css = \"green\";\n\n      return `<div class=\"${css}\"><h3>${key}</h3><span>${value}</span></div>`;\n    })\n    .join(\"\");\n}\nreturn {\n  payload: buildTemplate(msg)\n};\n",
    "outputs": 1,
    "noerr": 0,
    "x": 610,
    "y": 360,
    "wires": [["d257bf19.d88a6"]]
  },
  {
    "id": "ad54880b.715b88",
    "type": "sendgrid",
    "z": "d540fbb2.7b0058",
    "from": "",
    "to": "",
    "name": "Send Email",
    "content": "html",
    "x": 1110,
    "y": 140,
    "wires": []
  },
  {
    "id": "e2f5d66a.7727b8",
    "type": "debug",
    "z": "d540fbb2.7b0058",
    "name": "Console - ngrok",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 370,
    "y": 260,
    "wires": []
  },
  {
    "id": "a6c4b7d3.24d7f8",
    "type": "debug",
    "z": "d540fbb2.7b0058",
    "name": "Console - Body",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 820,
    "y": 200,
    "wires": []
  },
  {
    "id": "8500f782.de6718",
    "type": "inject",
    "z": "d540fbb2.7b0058",
    "name": "Turn on",
    "topic": "",
    "payload": "on",
    "payloadType": "str",
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "x": 100,
    "y": 120,
    "wires": [["45c3da37.e295a4"]]
  },
  {
    "id": "c23411c4.1e4c9",
    "type": "catch",
    "z": "d540fbb2.7b0058",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 600,
    "wires": [["eede8953.e5bae8"]]
  },
  {
    "id": "eede8953.e5bae8",
    "type": "debug",
    "z": "d540fbb2.7b0058",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 310,
    "y": 600,
    "wires": []
  },
  {
    "id": "7a6324ad.98f1bc",
    "type": "function",
    "z": "d540fbb2.7b0058",
    "name": "Prepare email Data",
    "func": "function buildTemplate(url) {\n    return `\n    <div style='margin 6%;'>\n        <a href=\"${url}/ui/\" target=\"_blank\">My Node-RED URL</a>\n    </div>`;    \n}\nfunction prepareEmailData({ payload }) {\n  const url = payload;\n   return {\n      topic: 'My Node-RED URL',\n      payload: buildTemplate(url),\n      key: env.get('SENDGRID_API_KEY'),\n      from: { email: env.get('SENDGRID_FROM'), name: 'Batify Bot' },\n      to: env.get('SENDGRID_TO')\n    };\n}\nreturn prepareEmailData(msg);\n",
    "outputs": 1,
    "noerr": 0,
    "x": 830,
    "y": 140,
    "wires": [["ad54880b.715b88", "a6c4b7d3.24d7f8"]]
  },
  {
    "id": "b1164a4b.a64598",
    "type": "inject",
    "z": "d540fbb2.7b0058",
    "name": "Turn off",
    "topic": "",
    "payload": "off",
    "payloadType": "str",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 90,
    "y": 180,
    "wires": [["f5423880.94a168"]]
  },
  {
    "id": "410d99f.c794f68",
    "type": "comment",
    "z": "d540fbb2.7b0058",
    "name": "!!! Bootstrapper Proxy !!!",
    "info": "",
    "x": 150,
    "y": 80,
    "wires": []
  },
  {
    "id": "f5423880.94a168",
    "type": "ngrok",
    "z": "d540fbb2.7b0058",
    "port": "",
    "creds": "d2141d2c.4b36e",
    "subdomain": "",
    "name": "",
    "auth": "",
    "x": 330,
    "y": 180,
    "wires": [["e2f5d66a.7727b8", "3c93d895.348a38"]]
  },
  {
    "id": "6b299f35.8ae3d",
    "type": "comment",
    "z": "d540fbb2.7b0058",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 150,
    "y": 540,
    "wires": []
  },
  {
    "id": "fc520ac4.7772a8",
    "type": "comment",
    "z": "d540fbb2.7b0058",
    "name": "Custom sendgrid configuration",
    "info": "## Can assign any data that SendGrid API has to provide\n - API key\n - Send To Email\n - Send From Email(s)\n - Body Message\n - Body with Attachment\n - File Name\n - Template ID\n - Template Data\n",
    "x": 860,
    "y": 100,
    "wires": []
  },
  {
    "id": "3d00a755.b9f198",
    "type": "comment",
    "z": "d540fbb2.7b0058",
    "name": "Send email via Sendgrid API",
    "info": "",
    "x": 1160,
    "y": 100,
    "wires": []
  },
  {
    "id": "47e18f0e.1ea2e",
    "type": "status",
    "z": "d540fbb2.7b0058",
    "name": "",
    "scope": null,
    "x": 640,
    "y": 600,
    "wires": [["84b1d1fd.1cd7b"]]
  },
  {
    "id": "84b1d1fd.1cd7b",
    "type": "debug",
    "z": "d540fbb2.7b0058",
    "name": "Console - Status",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 890,
    "y": 600,
    "wires": []
  },
  {
    "id": "1bbdd86.d60a128",
    "type": "comment",
    "z": "d540fbb2.7b0058",
    "name": "Handle All Node Status",
    "info": "",
    "x": 680,
    "y": 540,
    "wires": []
  },
  {
    "id": "b8006c7a.5c449",
    "type": "catch",
    "z": "3dae2bbd.3f58c4",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 620,
    "wires": [["4327e3f5.f4f60c"]]
  },
  {
    "id": "4327e3f5.f4f60c",
    "type": "debug",
    "z": "3dae2bbd.3f58c4",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 310,
    "y": 620,
    "wires": []
  },
  {
    "id": "7e7da10b.36286",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 150,
    "y": 560,
    "wires": []
  },
  {
    "id": "5303e6dd.607138",
    "type": "status",
    "z": "3dae2bbd.3f58c4",
    "name": "",
    "scope": null,
    "x": 620,
    "y": 620,
    "wires": [["88235b4b.31f108"]]
  },
  {
    "id": "88235b4b.31f108",
    "type": "debug",
    "z": "3dae2bbd.3f58c4",
    "name": "Console - Status",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 870,
    "y": 620,
    "wires": []
  },
  {
    "id": "a3e682f1.e8bf2",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "Handle All Node Status",
    "info": "",
    "x": 660,
    "y": 560,
    "wires": []
  },
  {
    "id": "6834d888.79f508",
    "type": "catch",
    "z": "af6b45a3.697ec8",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 640,
    "wires": [["3f0a03ea.716ecc"]]
  },
  {
    "id": "3f0a03ea.716ecc",
    "type": "debug",
    "z": "af6b45a3.697ec8",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 310,
    "y": 640,
    "wires": []
  },
  {
    "id": "86c7e7a4.6b66c8",
    "type": "comment",
    "z": "af6b45a3.697ec8",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 150,
    "y": 580,
    "wires": []
  },
  {
    "id": "b8730c03.c4f6",
    "type": "status",
    "z": "af6b45a3.697ec8",
    "name": "",
    "scope": null,
    "x": 600,
    "y": 640,
    "wires": [["e06e03bd.d580d"]]
  },
  {
    "id": "e06e03bd.d580d",
    "type": "debug",
    "z": "af6b45a3.697ec8",
    "name": "Console - Status",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 850,
    "y": 640,
    "wires": []
  },
  {
    "id": "5c380208.ee0afc",
    "type": "comment",
    "z": "af6b45a3.697ec8",
    "name": "Handle All Node Status",
    "info": "",
    "x": 640,
    "y": 580,
    "wires": []
  },
  {
    "id": "175aab57.028f05",
    "type": "ip",
    "z": "3dae2bbd.3f58c4",
    "name": "Public IP",
    "https": false,
    "timeout": "5000",
    "internalIPv4": true,
    "internalIPv6": false,
    "publicIPv4": true,
    "publicIPv6": false,
    "x": 360,
    "y": 100,
    "wires": [["ebb3a795.ca2a48"]]
  },
  {
    "id": "7cebb66f.958948",
    "type": "catch",
    "z": "9e92ac19.1083e",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 120,
    "y": 660,
    "wires": [["8bb82fc0.86564"]]
  },
  {
    "id": "8bb82fc0.86564",
    "type": "debug",
    "z": "9e92ac19.1083e",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 330,
    "y": 660,
    "wires": []
  },
  {
    "id": "47021361.5ce06c",
    "type": "comment",
    "z": "9e92ac19.1083e",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 170,
    "y": 600,
    "wires": []
  },
  {
    "id": "3a1855ee.0a05aa",
    "type": "status",
    "z": "9e92ac19.1083e",
    "name": "",
    "scope": null,
    "x": 620,
    "y": 660,
    "wires": [["cd8f4f61.5cdf8"]]
  },
  {
    "id": "cd8f4f61.5cdf8",
    "type": "debug",
    "z": "9e92ac19.1083e",
    "name": "Console - Status",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 870,
    "y": 660,
    "wires": []
  },
  {
    "id": "1b4fadda.9649a2",
    "type": "comment",
    "z": "9e92ac19.1083e",
    "name": "Handle All Node Status",
    "info": "",
    "x": 660,
    "y": 600,
    "wires": []
  },
  {
    "id": "c4fe3024.b875c",
    "type": "inject",
    "z": "9e92ac19.1083e",
    "name": "",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 120,
    "y": 100,
    "wires": [["d1d88fd0.7b765"]]
  },
  {
    "id": "fd000445.66ec98",
    "type": "mqtt in",
    "z": "9e92ac19.1083e",
    "name": "Sub: sensors/aqi/outdoor",
    "topic": "sensors/aqi/outdoor",
    "qos": "2",
    "datatype": "auto",
    "broker": "82d75fe6.a2011",
    "x": 170,
    "y": 160,
    "wires": [["5acae53.e2ba81c"]]
  },
  {
    "id": "d1d88fd0.7b765",
    "type": "mqtt out",
    "z": "9e92ac19.1083e",
    "name": "Pub: sensors/aqi/outdoor",
    "topic": "sensors/aqi/outdoor",
    "qos": "",
    "retain": "",
    "broker": "82d75fe6.a2011",
    "x": 470,
    "y": 100,
    "wires": []
  },
  {
    "id": "5acae53.e2ba81c",
    "type": "debug",
    "z": "9e92ac19.1083e",
    "name": "Console - MQTT",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 450,
    "y": 160,
    "wires": []
  },
  {
    "id": "a7a824e8.113688",
    "type": "comment",
    "z": "4349246e.5ce76c",
    "name": "Sample: Retrieve AQI (Eko)",
    "info": "",
    "x": 150,
    "y": 80,
    "wires": []
  },
  {
    "id": "992da476.b9d228",
    "type": "ui_gauge",
    "z": "4349246e.5ce76c",
    "name": "AQI Box",
    "group": "f6997764.fd6c78",
    "order": 1,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "Eko",
    "label": "µg/m³",
    "format": "{{payload}}",
    "min": 0,
    "max": "300",
    "colors": ["#40e400", "#ffff00", "#f91000"],
    "seg1": "Moderate",
    "seg2": "Unhealthy",
    "x": 680,
    "y": 140,
    "wires": []
  },
  {
    "id": "75eac697.68c7f8",
    "type": "comment",
    "z": "4349246e.5ce76c",
    "name": "Display US AQI",
    "info": "",
    "x": 700,
    "y": 80,
    "wires": []
  },
  {
    "id": "40980d59.7d9b74",
    "type": "catch",
    "z": "4349246e.5ce76c",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 620,
    "wires": [["e41149a2.e32038"]]
  },
  {
    "id": "e41149a2.e32038",
    "type": "debug",
    "z": "4349246e.5ce76c",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 310,
    "y": 620,
    "wires": []
  },
  {
    "id": "209df4d.ff89b0c",
    "type": "comment",
    "z": "4349246e.5ce76c",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 150,
    "y": 560,
    "wires": []
  },
  {
    "id": "21837c8.ff8c184",
    "type": "status",
    "z": "4349246e.5ce76c",
    "name": "",
    "scope": null,
    "x": 620,
    "y": 620,
    "wires": [["648756c9.c8f528"]]
  },
  {
    "id": "648756c9.c8f528",
    "type": "debug",
    "z": "4349246e.5ce76c",
    "name": "Console - Status",
    "active": false,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 870,
    "y": 620,
    "wires": []
  },
  {
    "id": "447fb6f2.ee3408",
    "type": "comment",
    "z": "4349246e.5ce76c",
    "name": "Handle All Node Status",
    "info": "",
    "x": 660,
    "y": 560,
    "wires": []
  },
  {
    "id": "9450fc04.f701",
    "type": "mqtt in",
    "z": "9e92ac19.1083e",
    "name": "Sub: DUST",
    "topic": "DUST",
    "qos": "2",
    "datatype": "auto",
    "broker": "96f74ae7.6c5c78",
    "x": 130,
    "y": 320,
    "wires": [["867efcad.1d3dd", "a16802a3.04198"]]
  },
  {
    "id": "867efcad.1d3dd",
    "type": "debug",
    "z": "9e92ac19.1083e",
    "name": "Console - Eko Dust",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 440,
    "y": 280,
    "wires": []
  },
  {
    "id": "764446c9.5e5a58",
    "type": "mqtt in",
    "z": "4349246e.5ce76c",
    "name": "Sub: sensors/aqi/indoor",
    "topic": "sensors/aqi/indoor",
    "qos": "2",
    "datatype": "auto",
    "broker": "82d75fe6.a2011",
    "x": 140,
    "y": 140,
    "wires": [["6d4e6c89.6eb874"]]
  },
  {
    "id": "a16802a3.04198",
    "type": "mqtt out",
    "z": "9e92ac19.1083e",
    "name": "Pub: sensors/aqi/indoor",
    "topic": "sensors/aqi/indoor",
    "qos": "",
    "retain": "",
    "broker": "82d75fe6.a2011",
    "x": 450,
    "y": 320,
    "wires": []
  },
  {
    "id": "58a4551f.b8513c",
    "type": "comment",
    "z": "9e92ac19.1083e",
    "name": "Sample MQTT Local",
    "info": "",
    "x": 150,
    "y": 40,
    "wires": []
  },
  {
    "id": "b9464881.5b8148",
    "type": "comment",
    "z": "9e92ac19.1083e",
    "name": "Dust Sensor (Eko)",
    "info": "",
    "x": 150,
    "y": 280,
    "wires": []
  },
  {
    "id": "66fa2d0e.c98664",
    "type": "mqtt out",
    "z": "9e92ac19.1083e",
    "name": "Pub: DUST",
    "topic": "DUST",
    "qos": "",
    "retain": "",
    "broker": "96f74ae7.6c5c78",
    "x": 550,
    "y": 460,
    "wires": []
  },
  {
    "id": "f90abe4d.745d4",
    "type": "function",
    "z": "9e92ac19.1083e",
    "name": "Random AQI",
    "func": "function random(){\n    return Math.floor(Math.random() * 300);\n}\n\nreturn {\n    payload: random()\n}",
    "outputs": 1,
    "noerr": 0,
    "x": 350,
    "y": 460,
    "wires": [["66fa2d0e.c98664"]]
  },
  {
    "id": "b2ee9e5a.89971",
    "type": "ui_button",
    "z": "9e92ac19.1083e",
    "name": "Random Button",
    "group": "75d6ea2b.fbf854",
    "order": 1,
    "width": 0,
    "height": 0,
    "passthru": true,
    "label": "Random Dust (Eko)",
    "tooltip": "Sample AQI (Indoor)",
    "color": "",
    "bgcolor": "",
    "icon": "fa-random",
    "payload": "",
    "payloadType": "date",
    "topic": "",
    "x": 140,
    "y": 460,
    "wires": [["f90abe4d.745d4"]]
  },
  {
    "id": "1af9d2a3.20b4fd",
    "type": "mqtt out",
    "z": "af6b45a3.697ec8",
    "name": "Pub: info/web/corona",
    "topic": "info/web/corona",
    "qos": "",
    "retain": "",
    "broker": "82d75fe6.a2011",
    "x": 640,
    "y": 480,
    "wires": []
  },
  {
    "id": "8445ca59.215f88",
    "type": "comment",
    "z": "af6b45a3.697ec8",
    "name": "Publish Corona Data",
    "info": "",
    "x": 630,
    "y": 440,
    "wires": []
  },
  {
    "id": "ae52ca62.2ee8f8",
    "type": "mqtt out",
    "z": "3dae2bbd.3f58c4",
    "name": "Pub: info/aqi/airvisual",
    "topic": "info/aqi/airvisual",
    "qos": "",
    "retain": "",
    "broker": "82d75fe6.a2011",
    "x": 620,
    "y": 300,
    "wires": []
  },
  {
    "id": "88990545.9387a8",
    "type": "comment",
    "z": "3dae2bbd.3f58c4",
    "name": "Publish AirVisual Data",
    "info": "",
    "x": 620,
    "y": 260,
    "wires": []
  },
  {
    "id": "fe3269b1.f53938",
    "type": "comment",
    "z": "9e92ac19.1083e",
    "name": "Random Dust Volume (Eko)",
    "info": "",
    "x": 180,
    "y": 420,
    "wires": []
  },
  {
    "id": "3c93d895.348a38",
    "type": "switch",
    "z": "d540fbb2.7b0058",
    "name": "Filtered URL",
    "property": "payload",
    "propertyType": "msg",
    "rules": [{ "t": "nnull" }],
    "checkall": "false",
    "repair": false,
    "outputs": 1,
    "x": 570,
    "y": 180,
    "wires": [["7a6324ad.98f1bc", "5337cf23.d906e"]]
  },
  {
    "id": "5337cf23.d906e",
    "type": "mqtt out",
    "z": "d540fbb2.7b0058",
    "name": "Pub: info/proxy/url",
    "topic": "info/proxy/url",
    "qos": "",
    "retain": "",
    "broker": "82d75fe6.a2011",
    "x": 830,
    "y": 300,
    "wires": []
  },
  {
    "id": "bca615a6.47c588",
    "type": "comment",
    "z": "d540fbb2.7b0058",
    "name": "Publish new URL",
    "info": "Publish new URL to the client via MQTT",
    "x": 820,
    "y": 260,
    "wires": []
  },
  {
    "id": "19055dee.10dbb2",
    "type": "mqtt in",
    "z": "9e92ac19.1083e",
    "name": "Sub: info/#",
    "topic": "info/#",
    "qos": "2",
    "datatype": "auto",
    "broker": "82d75fe6.a2011",
    "x": 780,
    "y": 100,
    "wires": [["50e1342.55059cc"]]
  },
  {
    "id": "50e1342.55059cc",
    "type": "debug",
    "z": "9e92ac19.1083e",
    "name": "Console - Info",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 960,
    "y": 100,
    "wires": []
  },
  {
    "id": "c77011b7.2f322",
    "type": "comment",
    "z": "9e92ac19.1083e",
    "name": "Subscribe All Info (Local)",
    "info": "",
    "x": 830,
    "y": 60,
    "wires": []
  },
  {
    "id": "6c76075c.a45338",
    "type": "mqtt in",
    "z": "7d20c29a.35472c",
    "d": true,
    "name": "Sub: info/proxy/url",
    "topic": "info/proxy/url",
    "qos": "2",
    "datatype": "auto",
    "broker": "82d75fe6.a2011",
    "x": 130,
    "y": 100,
    "wires": [["f6d30ef7.c6f7f"]]
  },
  {
    "id": "e17baa95.1a5818",
    "type": "comment",
    "z": "7d20c29a.35472c",
    "name": "Update webhook URL for Bot",
    "info": "",
    "x": 160,
    "y": 60,
    "wires": []
  },
  {
    "id": "f6d30ef7.c6f7f",
    "type": "function",
    "z": "7d20c29a.35472c",
    "name": "Prepare Bot Data",
    "func": "return {\n  headers: {\n    Authorization: `Bearer ${env.get(\"EKO_BOT_TOKEN\")}`\n  },\n  method: \"POST\",\n  url: `${env.get(\"EKO_BOT_HOST\")}/api/v1/admin/bot/${env.get(\"EKO_BOT_ID\")}`,\n  payload: {\n    username: env.get(\"EKO_BOT_USERNAME\"),\n    webhookUrl: `${msg.payload}/events/bot`,\n    enabled: true,\n    linkedUserId: env.get(\"EKO_BOT_USER_ID\"),\n    systemUserId: env.get(\"EKO_BOT_ID\")\n  }\n};\n",
    "outputs": 1,
    "noerr": 0,
    "x": 790,
    "y": 100,
    "wires": [["5acc209b.6e52"]]
  },
  {
    "id": "5acc209b.6e52",
    "type": "http request",
    "z": "7d20c29a.35472c",
    "name": "POST: Bot Data",
    "method": "use",
    "ret": "txt",
    "paytoqs": false,
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 1020,
    "y": 180,
    "wires": [["496e46f3.e49e08"]]
  },
  {
    "id": "583a0be8.f2ad24",
    "type": "catch",
    "z": "7d20c29a.35472c",
    "name": "Catch All",
    "scope": null,
    "uncaught": false,
    "x": 100,
    "y": 520,
    "wires": [["69e9009.cad59"]]
  },
  {
    "id": "69e9009.cad59",
    "type": "debug",
    "z": "7d20c29a.35472c",
    "name": "Error Log",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 310,
    "y": 520,
    "wires": []
  },
  {
    "id": "aeeb43e0.f1036",
    "type": "comment",
    "z": "7d20c29a.35472c",
    "name": "Handle All Error Exceptions",
    "info": "",
    "x": 160,
    "y": 460,
    "wires": []
  },
  {
    "id": "ee491c8c.8aedc",
    "type": "status",
    "z": "7d20c29a.35472c",
    "name": "",
    "scope": null,
    "x": 560,
    "y": 520,
    "wires": [["d1787123.e2a3d"]]
  },
  {
    "id": "d1787123.e2a3d",
    "type": "debug",
    "z": "7d20c29a.35472c",
    "name": "Console - Status",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 830,
    "y": 520,
    "wires": []
  },
  {
    "id": "e18129bd.7f3648",
    "type": "comment",
    "z": "7d20c29a.35472c",
    "name": "Handle All Node Status",
    "info": "",
    "x": 600,
    "y": 460,
    "wires": []
  },
  {
    "id": "496e46f3.e49e08",
    "type": "debug",
    "z": "7d20c29a.35472c",
    "name": "Console - Bot Data",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 1260,
    "y": 180,
    "wires": []
  },
  {
    "id": "e8b66480.ca08e8",
    "type": "debug",
    "z": "7d20c29a.35472c",
    "name": "Console - Bot Events",
    "active": true,
    "tosidebar": true,
    "console": true,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 450,
    "y": 220,
    "wires": []
  },
  {
    "id": "cb180ed5.b5e0d",
    "type": "http in",
    "z": "7d20c29a.35472c",
    "name": "Hook: events/bot",
    "url": "/events/bot",
    "method": "post",
    "upload": false,
    "swaggerDoc": "",
    "x": 120,
    "y": 220,
    "wires": [["e8b66480.ca08e8", "27d52086.cdf52"]]
  },
  {
    "id": "e2387583.49e3e8",
    "type": "http response",
    "z": "7d20c29a.35472c",
    "name": "Reply: OK",
    "statusCode": "200",
    "headers": { "node-red-state": "success" },
    "x": 400,
    "y": 340,
    "wires": []
  },
  {
    "id": "6d4e6c89.6eb874",
    "type": "delay",
    "z": "4349246e.5ce76c",
    "name": "Limit (5 sec.)",
    "pauseType": "rate",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "5",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": true,
    "x": 370,
    "y": 140,
    "wires": [["992da476.b9d228"]]
  },
  {
    "id": "c131349c.cda328",
    "type": "comment",
    "z": "4349246e.5ce76c",
    "name": "Rate Limit - 1 message per 5 sec.",
    "info": "",
    "x": 430,
    "y": 80,
    "wires": []
  },
  {
    "id": "45c3da37.e295a4",
    "type": "switch",
    "z": "d540fbb2.7b0058",
    "name": "Check Enable",
    "property": "NGROK_ENABLE",
    "propertyType": "env",
    "rules": [{ "t": "regex", "v": "true", "vt": "str", "case": true }],
    "checkall": "false",
    "repair": false,
    "outputs": 1,
    "x": 360,
    "y": 120,
    "wires": [["f5423880.94a168"]]
  },
  {
    "id": "d0011f03.7b1e1",
    "type": "comment",
    "z": "7d20c29a.35472c",
    "name": "Reply on bot messaging",
    "info": "",
    "x": 150,
    "y": 180,
    "wires": []
  },
  {
    "id": "27d52086.cdf52",
    "type": "switch",
    "z": "7d20c29a.35472c",
    "name": "Filter Bot Message",
    "property": "payload.events[0]",
    "propertyType": "msg",
    "rules": [{ "t": "nempty" }, { "t": "else" }],
    "checkall": "false",
    "repair": false,
    "outputs": 2,
    "x": 130,
    "y": 280,
    "wires": [["f3bbba85.debc68", "e2387583.49e3e8"], ["5f349cde.0d3b94"]]
  },
  {
    "id": "f3bbba85.debc68",
    "type": "switch",
    "z": "7d20c29a.35472c",
    "name": "Filter Message Type",
    "property": "payload.events[0].type",
    "propertyType": "msg",
    "rules": [
      { "t": "eq", "v": "join", "vt": "str" },
      { "t": "eq", "v": "message", "vt": "str" },
      { "t": "else" }
    ],
    "checkall": "false",
    "repair": false,
    "outputs": 3,
    "x": 440,
    "y": 273,
    "wires": [["3eef47ca.604f28"], ["8795227a.19265"], []]
  },
  {
    "id": "3eef47ca.604f28",
    "type": "function",
    "z": "7d20c29a.35472c",
    "name": "Bot Joining",
    "func": "function buildReplyJoin({ payload }) {\n  const {\n    events: [event]\n  } = payload;\n  return {\n    headers: {\n      Authorization: `Bearer ${env.get('EKO_BOT_TOKEN')}`\n    },\n    method: 'POST',\n    url: `${env.get('EKO_BOT_HOST')}/bot/v1/message/text`,\n    payload: {\n      replyToken: event.replyToken,\n      message: `What's up bro!`\n    }\n  };\n}\nreturn buildReplyJoin(msg);\n",
    "outputs": 1,
    "noerr": 0,
    "x": 770,
    "y": 180,
    "wires": [["5acc209b.6e52"]]
  },
  {
    "id": "8795227a.19265",
    "type": "function",
    "z": "7d20c29a.35472c",
    "name": "Bot Messaging",
    "func": "function buildReplyJoin({ payload }) {\n  const {\n    events: [event]\n  } = payload;\n\n  const { source, message } = event;\n  const checkSomeoneNeedBot = /(\\@|\\/)(batify|bot)/gi;\n  if (checkSomeoneNeedBot.test(message.text)) {\n    return {\n      headers: {\n        Authorization: `Bearer ${env.get('EKO_BOT_TOKEN')}`\n      },\n      method: 'POST',\n      url: `${env.get('EKO_BOT_HOST')}/bot/v1/message/text`,\n      payload: {\n        replyToken: event.replyToken,\n        message: `I think @${source.username.toUpperCase()} need some help.`\n      }\n    };\n  } else {\n    return null;\n  }\n}\nreturn buildReplyJoin(msg);\n",
    "outputs": 1,
    "noerr": 0,
    "x": 780,
    "y": 240,
    "wires": [["5acc209b.6e52"]]
  },
  {
    "id": "5f349cde.0d3b94",
    "type": "http response",
    "z": "7d20c29a.35472c",
    "name": "Reply: Bad Request",
    "statusCode": "400",
    "headers": { "node-red-state": "failed" },
    "x": 140,
    "y": 340,
    "wires": []
  }
]
